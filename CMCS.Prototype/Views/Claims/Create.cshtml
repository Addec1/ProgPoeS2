@model CMCS.Prototype.Models.ClaimVm
@{
    ViewData["Title"] = "New Claim";
}

<h1 class="h4 mb-3">New Claim</h1>

<form asp-action="Create" method="post" enctype="multipart/form-data" id="claimForm">
    @Html.AntiForgeryToken()

    <div class="row g-3">
        <div class="col-md-3">
            <label asp-for="LecturerName" class="form-label">Lecturer</label>
            <input asp-for="LecturerName" class="form-control" readonly />
        </div>
        <div class="col-md-2">
            <label asp-for="Month" class="form-label">Month</label>
            <input asp-for="Month" class="form-control" />
        </div>
        <div class="col-md-2">
            <label asp-for="Year" class="form-label">Year</label>
            <input asp-for="Year" class="form-control" />
        </div>
        <div class="col-md-3">
            <label asp-for="HourlyRate" class="form-label">Hourly Rate (R)</label>
            <input asp-for="HourlyRate" class="form-control" id="HourlyRate" />
        </div>
    </div>

    <hr class="my-4" />

    <h5 class="mb-2">Entries *</h5>
    <div class="table-responsive">
        <table class="table table-sm align-middle mb-2" id="entriesTable">
            <thead class="table-light">
                <tr><th style="width:160px">Date</th><th style="width:120px">Hours</th><th>Description</th><th style="width:1%"></th></tr>
            </thead>
            <tbody id="entriesBody">
                @for (var i = 0; i < (Model.Entries?.Count ?? 0); i++)
                {
                    <tr>
                        <td><input name="Entries[@i].Date" type="date" class="form-control" /></td>
                        <td><input name="Entries[@i].Hours" type="number" step="0.25" min="0" class="form-control hours" /></td>
                        <td><input name="Entries[@i].Description" class="form-control" placeholder="e.g., Lecture, marking" /></td>
                        <td><button type="button" class="btn btn-sm btn-outline-danger remove">Remove</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <button type="button" class="btn btn-outline-primary btn-sm" id="addRow">Add Row</button>

    <div class="mt-3 small text-body-secondary">
        <span id="totalHours">Total Hours: 0</span> &nbsp;|&nbsp;
        <span id="totalAmount">Total Amount (R): 0.00</span>
    </div>

    <hr class="my-4" />

    <h5 class="mb-2">Supporting Documents</h5>
    <input type="file" name="files" multiple class="form-control" accept=".pdf,.docx,.xlsx" />
    <div class="form-text">PDF/DOCX/XLSX • Max 10 MB each (prototype).</div>

    <div class="d-flex justify-content-end gap-2 mt-4">
        <a asp-action="Index" class="btn btn-outline-secondary">Cancel</a>
        <button type="submit" class="btn btn-success">Submit Claim</button>
    </div>
</form>

@section Scripts {
    <script>
        (function(){
          const body = document.getElementById('entriesBody');
          const add = document.getElementById('addRow');
          const hourly = ()=>parseFloat(document.getElementById('HourlyRate')?.value || '0');

          function row(date='', hours='', desc=''){
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td><input name="Entries[].Date" type="date" class="form-control"/></td>
              <td><input name="Entries[].Hours" type="number" step="0.25" min="0" class="form-control hours" value="${hours}"/></td>
              <td><input name="Entries[].Description" class="form-control" value="${desc}" placeholder="e.g., Lecture, marking"/></td>
              <td><button type="button" class="btn btn-sm btn-outline-danger remove">Remove</button></td>`;
            body.appendChild(tr);
          }

          add.addEventListener('click', ()=>row());

          body.addEventListener('click', e=>{
            if(e.target.classList.contains('remove')){
              e.target.closest('tr').remove();
              recalc();
            }
          });

          body.addEventListener('input', e=>{
            if (e.target.classList.contains('hours')) recalc();
          });

          function recalc(){
            let hrs = 0;
            body.querySelectorAll('.hours').forEach(i=>hrs += parseFloat(i.value) || 0);
            document.getElementById('totalHours').textContent = `Total Hours: ${hrs.toFixed(2)}`;
            document.getElementById('totalAmount').textContent = `Total Amount (R): ${(hrs*hourly()).toFixed(2)}`;
          }
          recalc();
        })();
    </script>
}
